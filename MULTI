/// app/login/page.tsx
import React, { useState } from "react";
import { useRouter } from "next/router";
import { Input, Label } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

const LoginPage = () => {
const router = useRouter();
const [isLogin, setIsLogin] = useState(true);
const [name, setName] = useState("");
const [email, setEmail] = useState("");
const [password, setPassword] = useState("");
const [age, setAge] = useState<string>("");
const [standard, setStandard] = useState("");
const [interestsRaw, setInterestsRaw] = useState("");

const handleSubmit = (e: React.FormEvent) => {
  e.preventDefault();
  if (!isLogin) {
    const user = {
      name: name || "Student",
      email,
      age: age ? Number.parseInt(age) : undefined,
      standard,
      interests: interestsRaw
        .split(",")
        .map((s) => s.trim())
        .filter(Boolean),
      createdAt: new Date().toISOString(),
    };
    try {
      if (typeof window !== "undefined") {
        localStorage.setItem("leoUser", JSON.stringify(user));
      }
    } catch {}
  }
  router.push("/dashboard");
};

return (
  <div className="flex flex-col items-center justify-center min-h-screen bg-background">
    <form onSubmit={handleSubmit} className="w-full max-w-sm space-y-4">
      {!isLogin && (
        <div className="space-y-2">
          <Label htmlFor="name" className="text-white">Name</Label>
          <Input
            id="name"
            placeholder="Your name"
            className="bg-white/10 border-white/20 text-white placeholder:text-white/50 focus-visible:ring-violet-500"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
        </div>
      )}
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="age" className="text-white">Age</Label>
          <div className="relative">
            <Input
              id="age"
              type="number"
              min={5}
              max={100}
              placeholder="Your age"
              className="bg-white/10 border-white/20 text-white placeholder:text-white/50 focus-visible:ring-violet-500"
              value={age}
              onChange={(e) => setAge(e.target.value)}
            />
          </div>
        </div>
        <div className="space-y-2">
          <Label className="text-white">Standard / Class</Label>
          <Select value={standard} onValueChange={setStandard}>
            <SelectTrigger className="bg-white/10 border-white/20 text-white placeholder:text-white/50 focus-visible:ring-violet-500">
              <SelectValue placeholder="Select your class" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="6th Grade">6th Grade</SelectItem>
              <SelectItem value="7th Grade">7th Grade</SelectItem>
              <SelectItem value="8th Grade">8th Grade</SelectItem>
              <SelectItem value="9th Grade">9th Grade</SelectItem>
              <SelectItem value="10th Grade">10th Grade</SelectItem>
              <SelectItem value="11th Grade">11th Grade</SelectItem>
              <SelectItem value="12th Grade">12th Grade</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
      <div className="space-y-2">
        <Label htmlFor="interests" className="text-white">Interests</Label>
        <Input
          id="interests"
          placeholder="e.g., Math, Coding, Physics"
          className="bg-white/10 border-white/20 text-white placeholder:text-white/50 focus-visible:ring-violet-500"
          value={interestsRaw}
          onChange={(e) => setInterestsRaw(e.target.value)}
        />
        <p className="text-xs text-white/70">Separate multiple interests with commas.</p>
      </div>
      <div className="space-y-2">
        <Label htmlFor="email" className="text-white">Email</Label>
        <Input
          id="email"
          type="email"
          placeholder="Your email"
          className="bg-white/10 border-white/20 text-white placeholder:text-white/50 focus-visible:ring-violet-500"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
      </div>
      <div className="space-y-2">
        <Label htmlFor="password" className="text-white">Password</Label>
        <Input
          id="password"
          type="password"
          placeholder="Your password"
          className="bg-white/10 border-white/20 text-white placeholder:text-white/50 focus-visible:ring-violet-500"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
      </div>
      <Button type="submit" className="w-full">
        {isLogin ? "Login" : "Sign Up"}
      </Button>
    </form>
  </div>
);
};

export default LoginPage;

// app/dashboard/page.tsx
import React, { useEffect, useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";

const DashboardPage = () => {
const [student, setStudent] = useState<{ name?: string; age?: number; standard?: string; interests?: string[] }>({});

useEffect(() => {
  try {
    if (typeof window !== "undefined") {
      const raw = localStorage.getItem("leoUser");
      if (raw) setStudent(JSON.parse(raw));
    }
  } catch {}
}, []);

return (
  <div className="flex flex-col items-center justify-center min-h-screen bg-background">
    <h1 className="text-2xl font-bold">{`Welcome back, ${student.name || "Student"}!`}</h1>
    <p className="text-muted-foreground">
      {student.standard ? `Standard: ${student.standard}` : "Ready to continue your learning journey?"}
      {student.age ? ` • Age: ${student.age}` : ""}
    </p>
    <Card className="mt-4">
      <CardContent className="p-6">
        <div className="flex items-center gap-4">
          <span className="text-sm text-muted-foreground">Coins:</span>
          <span className="text-sm font-medium">2450</span>
        </div>
        <div className="flex items-center gap-4 mt-4">
          <span className="text-sm text-muted-foreground">Courses Completed:</span>
          <span className="text-sm font-medium">12</span>
        </div>
      </CardContent>
    </Card>
    {student.interests && student.interests.length > 0 && (
      <div className="flex flex-wrap items-center gap-2 mt-4">
        <span className="text-sm text-muted-foreground">Your interests:</span>
        {student.interests.map((it, idx) => (
          <Badge key={idx} variant="outline" className="capitalize">
            {it}
          </Badge>
        ))}
      </div>
    )}
  </div>
);
};

export default DashboardPage;

// app/profile/page.tsx
import React, { useEffect, useState } from "react";
import { Mail, Phone, MapPin, Edit, BookOpen, Award, CreditCard, ChevronRight, LogOut, Calendar } from 'lucide-react';
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

const ProfilePage = () => {
const [user, setUser] = useState({
  name: "Alex Johnson",
  email: "alex.johnson@example.com",
  phone: "+1 (555) 123-4567",
  address: "123 Education St, Learning City",
  avatar: "/placeholder.svg?height=200&width=200",
  class: "10th Grade",
  joinDate: "September 2022",
  totalCoins: 2450,
  completedCourses: 12,
  achievements: [
    { id: 1, name: "Fast Learner", description: "Completed 10 courses", icon: "🚀" },
    { id: 2, name: "Math Wizard", description: "Scored 95% in Mathematics", icon: "🧙‍♂️" },
    { id: 3, name: "Science Explorer", description: "Completed all science courses", icon: "🔬" },
  ],
  enrolledCourses: [
    { id: 1, name: "Advanced Mathematics", progress: 75, icon: "📊" },
    { id: 2, name: "Physics Fundamentals", progress: 60, icon: "⚛️" },
    { id: 3, name: "Chemistry Basics", progress: 40, icon: "🧪" },
  ],
  age: null as number | null,
  interests: [] as string[],
});

useEffect(() => {
  try {
    if (typeof window !== "undefined") {
      const raw = localStorage.getItem("leoUser");
      if (raw) {
        const u = JSON.parse(raw);
        setUser((prev) => ({
          ...prev,
          name: u.name || prev.name,
          email: u.email || prev.email,
          class: u.standard || prev.class,
          age: typeof u.age === "number" ? u.age : prev.age,
          interests: Array.isArray(u.interests) ? u.interests : prev.interests,
        }));
      }
    }
  } catch {}
}, []);

return (
  <div className="flex flex-col items-center justify-center min-h-screen bg-background">
    <div className="flex flex-col items-center gap-4">
      <img src={user.avatar || "/placeholder.svg"} alt="Avatar" className="w-24 h-24 rounded-full" />
      <h1 className="text-2xl font-bold">{user.name}</h1>
      <p className="text-sm text-muted-foreground">{user.email}</p>
      <p className="text-sm text-muted-foreground">{user.phone}</p>
      <p className="text-sm text-muted-foreground">{user.address}</p>
      {user.age && (
        <div className="flex items-center gap-3">
          <Calendar className="h-5 w-5 text-muted-foreground" />
          <span className="text-sm">{`Age: ${user.age}`}</span>
        </div>
      )}
      <div className="flex items-center gap-3">
        <BookOpen className="h-5 w-5 text-muted-foreground" />
        <span className="text-sm">{`Standard: ${user.class}`}</span>
      </div>
    </div>
    <div className="mt-4">
      <Card className="w-full">
        <CardContent className="p-6">
          <div className="flex items-center gap-4">
            <span className="text-sm text-muted-foreground">Coins:</span>
            <span className="text-sm font-medium">{user.totalCoins}</span>
          </div>
          <div className="flex items-center gap-4 mt-4">
            <span className="text-sm text-muted-foreground">Courses Completed:</span>
            <span className="text-sm font-medium">{user.completedCourses}</span>
          </div>
        </CardContent>
      </Card>
      {user.interests && user.interests.length > 0 && (
        <div className="space-y-2 mt-4">
          <p className="text-sm font-medium mt-2">Interests</p>
          <div className="flex flex-wrap gap-2">
            {user.interests.map((it, idx) => (
              <Badge key={idx} variant="outline" className="capitalize">
                {it}
              </Badge>
            ))}
          </div>
        </div>
      )}
      <Button className="mt-4">
        <Edit className="mr-2 h-4 w-4" />
        Edit Profile
      </Button>
    </div>
  </div>
);
};

export default ProfilePage;
